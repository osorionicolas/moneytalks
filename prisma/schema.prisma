generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  expensesCreated Expense[]      @relation("ExpenseCreated")
  expensesUpdated Expense[]      @relation("ExpenseUpdated")
  groups          GroupMembers[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id           String     @id @default(cuid())
  name         String?
  image        String?
  whiteboard   String?
  cover        String
  createdAt    DateTime   @map("created_at")
  groupType    String     @map("group_type")
  expenses     Expense[]
  members      GroupMembers[]
}

model GroupMembers {
  groupId  String @map("group_id")
  group    Group  @relation(fields: [groupId], references: [id])
  memberId String @map("member_id")
  member   User   @relation(fields: [memberId], references: [id])

  @@unique([groupId, memberId])
}

model Expense {
  id          String    @id @default(cuid())
  description String
  comments    String?
  category    String
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  cost        Int
  currency    String
  groupId     String    @map("group_id")
  createdBy   String    @map("created_by")
  updatedBy   String?   @map("updated_by")
  group       Group     @relation(fields: [groupId], references: [id])
  createdById User      @relation("ExpenseCreated", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedById User?     @relation("ExpenseUpdated", fields: [updatedBy], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @map("created_at")
  createdBy String    @map("created_by")
  image     String?
}
